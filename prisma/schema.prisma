generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id // NIM or admin Id
  username String // The real name of the user
  password String
  role     String // Values being 'admin' or 'user'

  sessions   Session[]
  activities UserActivities[]
  userClass  UserClass[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model ActivityType {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  description  String
  experience   Int
  maxQuota     Int // Only used when resetTime is "weekly"
  resetTime    String // Values being either "weekly" or "semester"
  titleId      Int?
  userActivity UserActivities[]
  title        Title?           @relation(fields: [titleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model UserActivities {
  id           Int      @id @default(autoincrement())
  userId       String
  actionTypeId Int
  classId      Int
  doneAt       DateTime @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionType ActivityType @relation(fields: [actionTypeId], references: [id], onDelete: Cascade)
  class      Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Title {
  id           Int            @id @default(autoincrement())
  titleName    String         @unique
  activityType ActivityType[]
}

model Class {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  userClass      UserClass[]
  UserActivities UserActivities[]
}

model UserClass {
  id      Int    @id @default(autoincrement())
  userId  String
  classId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Level {
  id         Int    @id @default(autoincrement())
  level      Int
  levelName  String
  experience Int
}
